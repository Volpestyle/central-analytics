name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET: central-analytics-pwa
  # Add CLOUDFRONT_DISTRIBUTION_ID as a GitHub secret after first deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build application
        run: bun run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          # Sync all files with cache headers
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "manifest.json" \
            --exclude "sw.js" \
            --exclude "workbox-*.js"

          # Upload HTML files with no-cache
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

          # Upload PWA files with specific headers
          aws s3 cp dist/manifest.json s3://${{ env.S3_BUCKET }}/manifest.json \
            --cache-control "no-cache" \
            --content-type "application/manifest+json" || true

          if [ -f "dist/sw.js" ]; then
            aws s3 cp dist/sw.js s3://${{ env.S3_BUCKET }}/sw.js \
              --cache-control "no-cache, no-store, must-revalidate" \
              --content-type "application/javascript"
          fi

          # Upload workbox files
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --exclude "*" \
            --include "workbox-*.js" \
            --cache-control "public, max-age=31536000" \
            --content-type "application/javascript"

      - name: Invalidate CloudFront
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåç S3 URL: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            DOMAIN=$(aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)
            echo "üöÄ CloudFront URL: https://$DOMAIN"
          fi